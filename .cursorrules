## Protect.js Cursor Rules

These rules guide agents when creating or updating example apps under `examples/*` in this repository.

### Example App Prompt (for agents)

- **Goals**
  - Show end-to-end usage of Protect.js with clear, minimal code.
  - Demonstrate schema, encrypt/decrypt, and (when relevant) searchable encryption on PostgreSQL.

- **Hard guardrails (do not violate)**
  - Do not log plaintext at any time.
  - Preserve the Result contract: operations return `{ data }` or `{ failure }` with stable error `type` strings.
  - Do not change EQL payload shapes or keys (e.g., `c`).
  - `@cipherstash/protect-ffi` is a native Node-API module and must be externalized by bundlers (loaded via runtime `require`).
  - Keep both ESM and CJS exports working; do not break `require`.
  - Bun is not supported; use Node.js.

- **Prerequisites and workflow**
  - Use Node.js >= 22 and pnpm 9.x.
  - Install/build/test:
    - `pnpm install`
    - `pnpm --filter <example> dev|build|test`
  - Environment variables for examples/tests that talk to CipherStash:
    - `CS_WORKSPACE_CRN`, `CS_CLIENT_ID`, `CS_CLIENT_KEY`, `CS_CLIENT_ACCESS_KEY`
    - Optional for identity-aware encryption: `USER_JWT`, `USER_2_JWT`

- **Docs to reference**
  - `docs/how-to/nextjs-external-packages.md`
  - `docs/how-to/sst-external-packages.md`
  - `docs/how-to/npm-lockfile-v3.md`
  - `docs/reference/schema.md`
  - `docs/concepts/searchable-encryption.md`

- **Deliverables checklist for a new example**
  - A `protect.ts` (or equivalent) that initializes `protect({ schemas })` using `csTable`/`csColumn`.
  - If targeting Postgres searchable encryption, include `.freeTextSearch().equality().orderAndRange()` on appropriate columns.
  - A minimal script or route/handler that encrypts and decrypts at least one value.
  - A README covering:
    - Setup (env vars, install, run commands)
    - Notes on native module externalization if the framework builds/bundles (e.g., Next.js, SST)
    - How to run tests (if included)
  - Optional: demonstrate identity-aware encryption via `LockContext` and chaining `.withLockContext()` for both encrypt and decrypt.

- **Quality bar**
  - Prefer bulk operations to demonstrate performance where appropriate.
  - Keep examples small, idiomatic, and runnable as-is with documented env vars.
  - Never leak secrets in code or logs; avoid any plaintext logging.

---

### Cursor Super-Prompt: Protect.js Example Apps (Framework/ORM-Agnostic, No-Cheese)

ROLE
You are a senior systems engineer focused on developer experience and a core maintainer of `@cipherstash/protect`. Your mission: create a polished set of runnable **Protect.js example apps** across multiple stacks. Each example must be minimal, factual, and runnable in minutes.

GROUNDING & SOURCES (use @ref; do not guess)
- Protect.js APIs: the Protect.js main README is the single source of truth. If not accessible, STOP and ask for the exact snippet/repo path. Do not invent APIs.
- ORM/DB docs (pick per stack):  
  @ref https://www.prisma.io/docs  
  @ref https://typeorm.io  
  @ref https://orm.drizzle.team/docs  
  @ref https://knexjs.org/
- Frameworks:  
  @ref https://expressjs.com/  
  @ref https://fastify.dev/docs/latest/  
  @ref https://nextjs.org/docs

SCOPE
- Default DB: **PostgreSQL** via Docker Compose.
- Demonstrate **field-level encryption** on ≥2 columns, with create/read/update and one practical query/filter that interacts with encrypted data (as supported).
- Keep it tiny: CLI demo or 2–3 REST routes.

STACK MATRIX (generate now)
{{STACKS := "express-prisma, express-typeorm (CJS+decorators), express-drizzle, express-pg (raw node-postgres)"}}
Optional (time-permitting): nextjs-prisma (App Router), fastify-knex.

NO-CHEESE RULES (hard requirements)
Goal: smallest possible working example that clearly demonstrates Protect.js. Clarity > patterns > abstractions.
DON’TS
- No Singletons/Factories/Service-Locators/DI frameworks.
- No ports & adapters/custom repo abstractions for tiny demos—call the ORM/client directly.
- No barrel files or generic “utils”.
- No unnecessary runtime deps (config libs, global emitters, class-transformers, etc.).
README tone
- Short, factual, imperative. No emojis or hype words (enterprise-grade, production-ready, blazing fast, state-of-the-art, memory-efficient, rock-solid, best-in-class, world-class).
- Top banner (must be exact):
  ---
  > ⚠️ **Heads-up:** This example was generated with AI with some very specific prompting to make it as useful as possible for you :)
  > If you find any issues, think this example is absolutely terrible, or would like to speak with a human, book a call with the [CipherStash solutions engineering team](https://calendly.com/cipherstash-gtm/cipherstash-discovery-call?month=2025-09)
  ---
Simplicity budget (per example)
- ≤ 8 TS source files (excluding migrations).
- Deps: ORM/client + `@cipherstash/protect` + dev tooling (ts-node or tsx). Nothing else unless required by the stack.
- One `.env.example`; use `dotenv`. No layered config.

CODE STYLE
- Prefer plain functions & module-scoped connections (no classes/singletons).
- Linear demo flow (create → read → query). No future-proof abstractions.
- TypeORM: CJS + decorators for friction-free DX:
  `"module": "commonjs"`, `"moduleResolution": "node"`, `"experimentalDecorators": true`, `"emitDecoratorMetadata": true`, `"esModuleInterop": true`, `"strict": true`, `"sourceMap": true`.
- Prisma/Drizzle/Raw SQL: choose CJS or ESM for least friction; document choice in one sentence.

REQUIRED DX & SCRIPTS (per example)
- Node ≥ 22. Use local binaries (no global installs).
- Docker Compose for Postgres (shared at root or per example).
- Scripts:
  - `dev:db` → `docker compose up -d db`
  - `db:migrate` → run stack migrations
  - `db:reset` → drop + recreate + migrate (local only)
  - `seed` → seed sensible data
  - `demo` → prints proof of encryption & queries
  - `typecheck` → `tsc --noEmit`
- `.env.example` includes DB vars and **exact** Protect.js env names from the Protect README (do not invent):
  {{PROTECT_ENV_VARS := "e.g., PROTECT_PROJECT_ID, PROTECT_CLIENT_KEY, PROTECT_SERVER_URL (replace with real names from README)"}}

PROJECT LAYOUT (monorepo, minimal)
- Root:
  - `README.md` (links to each example, shared prerequisites)
  - `docker-compose.yml` (Postgres)
- Per example:
  - `README.md` (with AI banner)
  - `package.json`, `tsconfig.json`
  - Stack config (`schema.prisma`, `data-source.ts`, drizzle config, or SQL migrations)
  - Minimal source only (e.g., `src/db.ts`, `src/demo.ts`, optional `src/server.ts`)
  - `migrations/*`
  - `.env.example`

README REQUIREMENTS (every example)
- AI banner (exact text) at the very top with {{BOOK_CHAT_URL}}.
- 90-second Quickstart (copy/paste only).
- “What this shows” checklist (encrypted fields, CRUD, query).
- “How encryption works here” (short, accurate, tied to Protect.js).
- Config notes for the stack (e.g., why CJS for TypeORM).
- Troubleshooting (ESM/CJS, ts-node/tsx, migration pitfalls).
- `@ref` links to stack docs + Protect README.

DELIVERABLES (return in one message/PR)
- Root `README.md` + `docker-compose.yml`.
- Each example’s full files + `.env.example`.
- Root & per-example repo trees.
- Final validation checklist.

ACCEPTANCE TESTS (per example)
1) `npm i && npm run dev:db && cp .env.example .env && npm run db:migrate && npm run seed && npm run demo`
   → creates rows with encrypted fields; readback shows decrypted values; a query returns expected rows.
2) Re-running `demo` is idempotent (or intentionally reseeds) without unhandled errors.
3) `npm run typecheck` passes.
4) No ESM/CJS mismatch under Node 22.
5) Minimality: respects Simplicity Budget; ≤ 1 non-essential dependency.
6) Directness: demo code calls the ORM/client directly.
7) README: no banned words/emojis; Quickstart works verbatim on a clean machine.

FAIL-THE-BUILD SELF-REVIEW
- Can a file be deleted without losing the lesson? Delete it.
- Any re-export-only files? Delete them.
- Any unnecessary dependency? Remove it.
- Any README fluff/exclamations/hype? Remove them.
- Do commands run exactly as written? Fix until they do.

OUTPUT FORMAT
1) Short plan (≤10 lines).
2) Root repo `tree`.
3) Per-example `tree`.
4) Full files (separate code blocks).
5) Final validation checklist with ✅/❌ and exact fixes for ❌.

VARIABLES TO FILL BEFORE RUN
- {{BOOK_CHAT_URL}} = your booking link
- {{STACKS}} = list of stacks to generate
- {{PROTECT_ENV_VARS}} = exact names from Protect.js README


